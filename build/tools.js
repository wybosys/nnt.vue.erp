const fs = require('fs')
const path = require('path')

// 停止dev用的web服务器
function StopDevServer() {
  if (fs.existsSync('run/dev-server.pid')) {
    let buf = fs.readFileSync('run/dev-server.pid')
    let pid = buf.toString()
    try {
      process.kill(parseInt(pid))
    } catch (err) {
    }
    fs.unlinkSync('run/dev-server.pid')
  }
}

// 保存dev运行的服务器信息
function SaveDevServer() {
  if (!fs.existsSync('run'))
    fs.mkdirSync('run')
  fs.writeFileSync('run/dev-server.pid', process.pid)
}

// 保存当前项目解析出的router架构
class RouterNode {

  constructor() {

    // 访问路径
    this.path = ''

    // 相对路径
    this.relv = ''

    // 节点名
    this.node = ''

    // 组件实现的类
    this.component = null

    // 组件名
    this.name = ''

    // 是否为模块
    this.module = false

    // 优先级
    this.priority = 9999

    // 显示的名称
    this.label = null

    // 页面路径
    this.page = null

    // 是否是默认节点
    this.default = false

    // 是否隐藏
    this.hide = false

    // 父节点
    this.parent = null

    // 子节点
    this.children = []
  }

  add(node) {
    node.parent = this
    this.children.push(node)
  }

  // 解析目录
  static FromDirectory(dir) {
    let r = new RouterNode()

    // 解析当前节点
    if (fs.existsSync(`${dir}/config.json`)) {
      let cfgobj = JSON.parse(fs.readFileSync(cfg))
      r.node = path.basename(dir)
      if (cfgobj.path)
        r.path = cfgobj.path
      if (cfgobj.rpath)
        r.relv = cfgobj.rpath
      else
        r.relv = r.node

      // 判断是否存在实现的页面
      let page = UppercaseFirst(r.node)
      if (fs.existsSync(`${dir}/${page}.vue`)) {
        r.path = `${dir}/${page}.vue`
        if (cfgobj.default)
          r.default = true

        r.label = cfgobj.label ? cfgobj.label : page
        r.module = true
        if (cfgobj.priority >= 0)
          r.priority = cfgobj.priority
        if (cfgobj.hide)
          r.hide = true
      }
    }

    // 解析子节点
    fs.readdirSync(dir).forEach(e => {
      let st = fs.statSync(`${dir}/${e}`)
      if (st.isDirectory()) {
        let child = RouterNode.FromDirectory(`${dir}/${e}`)
        r.add(child)
      } else {
        let c = new RouterNode()
        c.node = c.relv = path.basename(e, '.vue').toLowerCase()
        r.add(c)
      }
    })

    return r
  }
}

function SetObjectValue(result, group, key, value) {
  if (!(group in result)) {
    result[group] = {}
  }
  result[group][key] = value
}

function GenRoutes(outputfile, ...srcdirs) {
  // 默认输出到src/router/index.ts中

  // { path: filepath }
  let imports = []
  let defs = []

  // 列出所有目录中的组件
  srcdirs.forEach(e => {
    let dir = 'src/' + e
    if (fs.existsSync(dir)) {
      let routes = {}
      ListRoutesInDirectory(dir, e, routes)

      for (let key in routes) {
        let cfg = routes[key]
        let name = key.replace(/\//g, '_')

        imports.push('const ' + name + ' = () => import("../' + cfg.file + '")')
        let def = "    {"
        let arr = [
          "\n      path: '" + key + "'",
          "\n      component: " + name,
          "\n      name: '" + name + "'"
        ]

        if (cfg.module) {
          arr.push("\n      module: true")
          arr.push("\n      priority: " + cfg.priority)
          arr.push("\n      label: '" + cfg.label + "'")
          if (cfg.hide)
            arr.push("\n      hide: true")
        }

        def += arr.join(',') + "\n    }"
        defs.push(def)
      }
    }
  })

  // 如果是二级目录，则需要生成额外的router
  /*
  if (fs.existsSync('devops.json')) {
    let devops = JSON.parse(fs.readFileSync('devops.json'))
    let path = devops.path.substr(15)
    for (let key in routes) {
      let name = key.replace(/\//g, '_')
      key = path + key
      defs.push(" {\n  path: '" + key + "',\n  component: " + name + ",\n  name: 'devops" + name + "'\n }")
    }
  }
  */

  content = '// generated by build/tools.js\n'
  content += imports.join('\n')
  content += '\n\n'
  content += 'export default {\n'
  content += '  routes: [\n'
  content += defs.join(',\n')
  content += ']\n'
  content += '}\n'

  // 保存
  fs.writeFileSync('src/router/' + outputfile + '.ts', content)
}

function GenRoutesInSite(srcdir, site) {
  // 默认输出到src/router/index.ts中
  // 默认组件保存在src/components中

  // { path: filepath }
  let routes = {}

  // 列出所有目录中的组件
  ListRoutesInDirectory('src/' + srcdir, '', routes, site)

  let imports = []
  let defs = []

  for (let key in routes) {
    let cfg = routes[key]
    let name = key.replace(/\//g, '_')
    imports.push('const ' + name + ' = () => import("../sites/' + site + cfg.file + '")')
    defs.push("  {\n    path: '" + key + "',\n    component: " + name + ",\n    name: '" + name + "'\n  }")
  }

  // 如果是二级目录，则需要生成额外的router
  /*
  if (fs.existsSync('devops.json')) {
    let devops = JSON.parse(fs.readFileSync('devops.json'))
    let path = devops.path.substr(15)
    for (let key in routes) {
      let name = key.replace(/\//g, '_')
      key = path + key
      defs.push(" {\n  path: '" + key + "',\n  component: " + name + ",\n  name: 'devops" + name + "'\n }")
    }
  }
  */

  content = '// generated by build/tools.js\n'
  content += imports.join('\n')
  content += '\n\n'
  content += 'export default [\n'
  content += defs.join(',\n')
  content += '\n]\n'

  // 保存
  fs.writeFileSync('src/router/' + site + '.ts', content)
}

function UppercaseFirst(str) {
  if (!str || str.length == 0)
    return str
  return str[0].toUpperCase() + str.substr(1)
}

function ListRoutesInDirectory(dir, cur, result, site) {
  let cfg = dir + '/config.json'
  let curpath = cur;

  if (fs.existsSync(cfg)) {
    let cfgobj = JSON.parse(fs.readFileSync(cfg))
    let rootname = UppercaseFirst(path.basename(cur))

    // 如果定义了path，则使用config的定义
    if (cfgobj.path)
      curpath = cfgobj.path;

    if (fs.existsSync(dir + '/' + rootname + '.vue')) {
      SetObjectValue(result, curpath, 'file', cur + '/' + rootname + '.vue')
      if (cfgobj.default) {
        SetObjectValue(result, path.dirname(curpath), 'file', cur + '/' + rootname + '.vue')
      }

      SetObjectValue(result, curpath, 'priority', cfgobj.priority >= 0 ? cfgobj.priority : 9999)
      SetObjectValue(result, curpath, 'label', cfgobj.label ? cfgobj.label : rootname)
      SetObjectValue(result, curpath, 'module', true)

      if (cfgobj.hide)
        SetObjectValue(result, curpath, 'hide', true)
    }
  }

  // 如果是site模式，则必须生成根
  if (site) {
    let rootname = UppercaseFirst(site)
    SetObjectValue(result, '/', 'file', cur + '/' + rootname + '.vue')
  }

  fs.readdirSync(dir).forEach(each => {
    let st = fs.statSync(dir + '/' + each)
    if (st.isDirectory()) {
      ListRoutesInDirectory(dir + '/' + each, cur + '/' + each, result)
    } else {
      if (path.extname(each) == ".vue") {
        let name = path.basename(each, ".vue").toLowerCase()
        SetObjectValue(result, curpath + '/' + name, 'file', cur + '/' + each)
      }
    }
  })
}

function GenSites() {
  dir = 'sites'
  sites = []
  defaultsite = null
  fs.readdirSync('src/' + dir).forEach(each => {
    let st = fs.statSync('src/' + dir + '/' + each)
    if (st.isDirectory()) {
      sites.push(each)
      GenRoutesInSite(dir + '/' + each, each)
      // 读取配置
      let cfg = 'src/' + dir + '/' + each + '/config.json'
      if (fs.existsSync(cfg)) {
        let cfgobj = JSON.parse(fs.readFileSync(cfg))
        if (cfgobj.default)
          defaultsite = each
      }
    }
  })

  // 生成基础的routers，来支持多站点
  let content = [];
  content.push('// generated by build/tools.js')

  // 导入对象
  content.push('const _ = () => import("../nnt/sites/Index.vue")')
  sites.forEach(site => {
    content.push('const ' + site + ' = () => import("./' + site + '")')
  })

  // 生成路由配置
  content.push('')
  content.push('export default {')

  // 生成gateway路由配置
  content.push('  routes: [')
  content.push("    {\n      path: '/',\n      component: _,\n      name: '_site_'\n    },")
  content.push("    {\n      path: '/:site',\n      component: _,\n      name: '_site__'\n    },")
  content.push("    {\n      path: '*',\n      component: _,\n      name: '_any_'\n    }")
  content.push('  ],')

  // 生成sites的配置
  content.push('  sites: {')
  let sitecontents = []
  sites.forEach(each => {
    sitecontents.push('    ' + each + ': ' + each)
  })
  if (defaultsite && !('default' in sites))
    sitecontents.push('    default: ' + defaultsite)
  content.push(sitecontents.join(',\n'))
  content.push('  }')

  content.push('}')
  fs.writeFileSync('src/router/index.ts', content.join('\n'))
}

// 获得当前项目配置的devops目录
function GetDevopsDomain() {
  let devops = JSON.parse(fs.readFileSync('devops.json'))
  let path = devops.path.substr(15)
  return path
}

// 直接运行命令
if (require.main == module) {
  if (process.argv.indexOf('stop') != -1) {
    StopDevServer()
  } else if (process.argv.indexOf('routes') != -1) {
    GenRoutes('index', 'app', 'components')
  } else if (process.argv.indexOf('sites') != -1) {
    GenSites()
  }
}

module.exports = {
  StopDevServer,
  SaveDevServer,
  GetDevopsDomain
}
